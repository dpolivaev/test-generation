/*
 * generated by Xtext
 */
package org.dpolivaev.dsl.tsgen.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.dpolivaev.dsl.tsgen.services.StrategyDslGrammarAccess

import java.util.List

import com.google.inject.Inject

import org.eclipse.xtext.Keyword
import org.dpolivaev.dsl.tsgen.services.StrategyDslGrammarAccess.StrategyElements
import org.dpolivaev.dsl.tsgen.services.StrategyDslGrammarAccess.ValueActionElements
import org.dpolivaev.dsl.tsgen.services.StrategyDslGrammarAccess.RuleGroupElements

// import com.google.inject.Inject
// import org.dpolivaev.dsl.tsgen.services.StrategyDslGrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class StrategyDslFormatter extends AbstractDeclarativeFormatter {

	@Inject extension StrategyDslGrammarAccess

	override protected void configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(120);
		
		val List<Keyword> noSpaceBeforeKeywords = findKeywords(",")
		for (Keyword keyword : noSpaceBeforeKeywords) {
			c.setNoSpace.before(keyword)
			c.setLinewrap(0, 0, 1).after(keyword)
		}
		configureFormatting(c, strategyAccess)
		configureFormatting(c, ruleGroupAccess)
		configureFormatting(c, valueActionAccess)

		configureComments(c)
	}

	def private configureComments(FormattingConfig c) {
		c.setLinewrap(0, 1, 2).before(getSL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(getML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(getML_COMMENTRule)
	}

	def private configureFormatting(FormattingConfig c, StrategyElements strategyAccess) {
		c.setLinewrap.after(strategyAccess.nameIDTerminalRuleCall_1_0)
		c.setIndentationIncrement.after(strategyAccess.nameIDTerminalRuleCall_1_0)
		c.setIndentationDecrement.after(strategyAccess.rule)
		c.setLinewrap.after(strategyAccess.rule)
	}

	def private configureFormatting(FormattingConfig c, ValueActionElements valueActionAccess) {
		val Keyword leftCurlyBracket = valueActionAccess.leftCurlyBracketKeyword_2_0
		c.setLinewrap.after(leftCurlyBracket)
		c.setIndentationIncrement.after(leftCurlyBracket)
		val Keyword rightCurlyBracket = valueActionAccess.rightCurlyBracketKeyword_2_2
		c.setIndentationDecrement.before(rightCurlyBracket)
		c.setLinewrap.before(rightCurlyBracket)
	}

	def private configureFormatting(FormattingConfig c, RuleGroupElements ruleGroupAccess) {
		c.setLinewrap.before(ruleGroupAccess.rule)
		c.setLinewrap.before(ruleGroupAccess.alternatives_0_1)
		val Keyword leftCurlyBracketKeyword = ruleGroupAccess.leftCurlyBracketKeyword_0_2_1_0
		c.setLinewrap.after(leftCurlyBracketKeyword)
		c.setIndentationIncrement.after(leftCurlyBracketKeyword)
		val Keyword rightCurlyBracket = ruleGroupAccess.rightCurlyBracketKeyword_0_2_1_2
		c.setIndentationDecrement.before(rightCurlyBracket)
		c.setLinewrap.before(rightCurlyBracket)
	}
}
