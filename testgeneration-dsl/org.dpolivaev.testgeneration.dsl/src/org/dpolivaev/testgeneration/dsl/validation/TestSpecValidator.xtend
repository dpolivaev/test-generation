/*
 * generated by Xtext
 */
package org.dpolivaev.testgeneration.dsl.validation

import com.google.inject.Inject
import org.dpolivaev.testgeneration.dsl.testspec.LabeledExpression
import org.dpolivaev.testgeneration.dsl.testspec.RuleGroup
import org.dpolivaev.testgeneration.dsl.testspec.TestspecPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations
import org.eclipse.xtext.xbase.XCastedExpression
import org.dpolivaev.testgeneration.dsl.testspec.PropertyCall
import org.dpolivaev.testgeneration.dsl.testspec.ValueProvider
import org.eclipse.xtext.EcoreUtil2
import org.dpolivaev.testgeneration.dsl.testspec.Rule

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class TestSpecValidator extends AbstractTestSpecValidator {
	
	@Inject IJvmModelAssociations modelAssociations
	
	@Check
	override checkInnerExpressions(XExpression expr) {
		val container = expr.eContainer
		switch(container){
			 LabeledExpression case container.reason == expr: return
		} 
		super.checkInnerExpressions(expr)
	}
	
	@Check
	def checkNamedRule(RuleGroup ruleGroup){
		if (ruleGroup.ruleName != null) {
			val feature = TestspecPackage.Literals.RULE_GROUP__RULE_NAME
			if(ruleGroup.rule == null){
				error("name without rule", ruleGroup,  feature)			
				return;
			}
			if(ruleGroup.rule.^lazy){
				error("named lazy rule", ruleGroup, feature)			
				return;
			}
			if(ruleGroup.rule.specialValue != null){
				error("named special rule", ruleGroup, feature)			
				return;
			}
		}
	}
	
	override isLocallyUsed(EObject target, EObject containerToFindUsage){
		if (super.isLocallyUsed(target, containerToFindUsage))
			true
		else{
			val jvmElements = modelAssociations.getJvmElements(target)
			for(jvmElement : jvmElements){
				if(jvmElement instanceof JvmField){
					if (jvmElement.visibility != JvmVisibility.PRIVATE || super.isLocallyUsed(jvmElement, containerToFindUsage))
						return true;
				}
			}
			false
		}
	}

	@Check
	override checkCasts(XCastedExpression cast) {
		if(! (cast.target instanceof PropertyCall))
			super.checkCasts(cast);
	}
	
	@Check
	def checkConditionedValues(ValueProvider valueProvider){
		if(valueProvider.condition != null) {
			val rule = EcoreUtil2.getContainerOfType(valueProvider, Rule)
			if(! rule.lazy && ! rule.ordered)
			error("Condition inside triggered not ordered rule", valueProvider,  TestspecPackage.Literals.VALUE_PROVIDER__CONDITION)			
		}
	}
	
	@Check
	def checkConditionedValues(Rule rule){
		val valueProvider = rule?.values?.actions?.last?.valueProviders?.last
		if(valueProvider.condition != null)
			error("Condition in the last value", valueProvider,  TestspecPackage.Literals.VALUE_PROVIDER__CONDITION)			
	}

}
