package login.testgeneration

import static login.LoginTestDriver.EMail.*;
import static login.LoginTestDriver.Password.*;
import static login.LoginTestDriver.Page.*;
import static login.LoginTestDriver.Protocol.*;

import login.LoginTestDriver.EMail;
import login.LoginTestDriver.Password;
import login.LoginTestDriver.Protocol;

import static login.testgeneration.LoginOracles.*;

strategy loginTests
	apply TestStructure.structure

	let script.driver be "login/LoginTestDriver"
	let script.imports be "import static login.LoginTestDriver.Page.*;
						   import static login.LoginTestDriver.EMail.*;
						   import static login.LoginTestDriver.Password.*;
						   import static login.LoginTestDriver.Protocol.*;"

	let arrange#1 be "go to page(:page)"
	let page be LOGIN_PAGE
	let default password be VALID_PASSWORD
	let default email be VALID_MAIL

	let act be "submit(:protocol)"{
		apply submitTest
	},
	"enter password(:password)"{
		apply formatTest
	}

strategy submitTest
	let script be "login/LoginSubmit"
	let arrange#2 be "enter mail address(:email)"
	let arrange#3 be "enter password(:password)"
	let assert be "checkPage(:pageAfterSubmit)"

	let protocol be HTTP{
		let [R1] be "logging in with protocol HTTP not allowed"
	},
	HTTPS {
		let email be VALID_MAIL { let password be VALID_PASSWORD, INVALID_PASSWORD, NOT_ENTERED_PASSWORD},
		INVALID_MAIL { let password be VALID_PASSWORD},
		NOT_ENTERED_MAIL { let password be VALID_PASSWORD, NOT_ENTERED_PASSWORD}
	}

	let pageAfterSubmit be :page{
		let assert#2 be "password field is empty"
		let assert#3 be "email field equals to (:email)"
		let [R4] be "check email and password fields after failed log-in"
	}

	if traced loginOracle.isLoginSuccessful(:protocol as Protocol, :email as EMail, :password as Password)
		let pageAfterSubmit be LOGIN_SUCCESS_PAGE

strategy formatTest
	let script be "login/LoginFormat"
	let assert be "entered password is not visible"
	let [R2] be :assert

