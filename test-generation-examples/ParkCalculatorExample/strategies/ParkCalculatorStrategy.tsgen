package parkcalculator.testgeneration

import org.dpolivaev.tsgen.strategies.StrategyHelper

/* 
 * Declare strategy parkCostCalculatorTests 
 * using predefined rules for test case id and test case description
 * available as StrategyHelper method
 */
strategy parkCostCalculatorTests

/*
 * Set properties used by the writer as generated test class, 
 * its imports and the test driver class.
 * Their values remains the same all the time.
 */
let script be "parkcalculator/ParkCalculatorTest"
let script.imports be "import static parkcalculator.Lots.*;
import static parkcalculator.BadValues.*;
import parkcalculator.testgeneration.LongTermGarageParkingCalculator;"
let script.driver be "parkcalculator/ParkCalculatorTestDriver"

/*
 * Declare property "category" with values "success" and "failure".
 */
let category be "success"{

	/*
	 * In this category define test focus as "calculate parking costs"
	 */
	let focus be "calculate parking costs"{
		
		/*
		 * For this focus define preconditions and verification steps
		 */		
		let precondition1 be "select lot (parking lot)"
		let precondition2 be "set entry time (entry time)"
		let precondition3 be "set parking duration (weeks, days, hours, minutes)"
		
		/* Keyword "default" means that property “verification” is lasily evaluated 
		 * and can be redefined adding another value to the rule set.
		 */
		let default verification be "verify parking costs (expectedCosts)"
		
		/* 
		 * Define multiple values for parameter “entryTime” of the second precondition.
		 */
		let "entry time" be '"01/1/1970 12:00 am"', '"12/31/1999 12:00 pm"', '"02/28/2016 23:59 pm"'
		
		/*
		 * Leaving time is calculated as entry time plus parking weeks, days, hours and minutes. 
		 * For each value of parameter "lot" used in the first precondition
		 * there are eight values of weeks and days which must be tried by the test.
		 */
		
		
		for each "parking lot" {
			let weeks be 
				0  { let days be 0, 1, 6}, 
				1  { let days be 1, 6},
				6  { let days be 0, 6},
				26 { let days be 4}
		}
		/*
		 * "parking lot" iterates over values "VALET_PARKING", "SHORT_TERM_PARKING" and so on.
		 * This value list is given a name listOfValidLots.
		 * It allows to use this list in definitions of other rules and reduce duplication.
		 */
		let "parking lot" be listOfValidLots with 
			"VALET_PARKING"{
				/*
				 * Costs for completed days required for calculation of expected costs for the verification
				 * are calculated as a concatenation of strings put in the round brackets.
				 * 
				 * Operator ':' is an accessor of another property value.
				 * 
				 */
				let dayCosts be ("(7 * ":weeks" + ":days") * 18")
				
				/*
				 * "parking time" is a helper property. 
				 * Arbitrary quoted strings can be used as property names too.
				 */
				let "parking time" be 
					"0 hours"{
						let hours be 0
						let minutes be 0
						let expectedCosts be :dayCosts
						let [Req2] be (:"parking lot"" costs ":expectedCosts)
						let [Req3] be (:"parking lot"" costs ":expectedCosts)
					},
					"5 hours or less"{
						/*
						 * Iteration over the following properties takes place simultaneously.
						 * Keyword "ordered" means that the following two properties are assigned their values in the given order
						 * so that they build pairs (0:1, 4:59 and 5:0)
						 */
						let hours be 0, 4, 5 ordered
						let minutes be 1, 59, 0 ordered
						let expectedCosts be (:dayCosts " + 12")
						
						/*
						 * Properties with names put in rectangular brackets are interpreted as requirements 
						 * satisfied by the test where they occur. This information can be collected in report and 
						 * additionally be written into the generated test file. 
						 */
						let [Req3] be (:"parking lot"" costs ":expectedCosts)
					},
					"more than 5 hours"{
						let hours be 5, 22, 23 ordered
						let minutes be 1, 0, 59 ordered
						let expectedCosts be (:dayCosts  " + 18")
						let [Req2] be (:"parking lot"" costs ":expectedCosts)
					}
				let [Req1] be (:"parking lot" " costs " :"parking time")
			}, 
			"SHORT_TERM_PARKING"{
				let hours be 0, 1, 11, 12, 23 {
					let minutes be 0, 30, 31, 59
				}
				/*
				 * Calculation of expected costs here makes use of a oracle ShortTermParkingCalculator defined right after the strategy.
				 * It demonstrates that use of separate models makes strategy more concise because 
				 * it does not have to implement the calculations itself. 
				 */
				let expectedCosts be traced ShortTermParkingCalculator.calculateCosts(:weeks as int, :days as int, :hours as int, :minutes as int)
			},  
			"LONG_TERM_GARAGE_PARKING"{
				let hours be 0, 1, 5, 6, 23 {
					let minutes be 0, 30, 31, 59
				}
				// call oracle just for coverage
				let modelCallResult be traced LongTermGarageParkingCalculator.calculateCosts(:weeks as int, :days as int, :hours as int, :minutes as int) 
				/*
				 * Calculation of expected costs here makes use of a oracle called by driver. 
				 */
				let expectedCosts be ("new LongTermGarageParkingCalculator().calculateCosts(":weeks", ":days", ":hours" ,":minutes")") 
			}, 
			"LONG_TERM_SURFACE_PARKING"{
				// verification performed by driver
				let verification be ("verify parking costs for lot ":"parking lot")
				let hours be 0, 4, 5, 23 {
					let minutes be 0,1, 59
				}
				let [Req11] be (:"parking lot"" ":hours" hours " :minutes" minutes")
				if (:hours as int) < 5 let [Req12] be (:hours" hours " :minutes" minutes")
				if (:hours as int) >= 5 let [Req13] be (:hours" hours " :minutes" minutes")
				if :days  == 0 let [Req14] be (:"parking lot"" ":weeks" weeks " :days" days")
			}, 
			"ECONOMY_LOT_PARKING"{
				/*
				 * In this example the dayCosts and expectedCosts are calculated completely by the strategy.
				 */
				let default dayCosts be :weeks as int * 54 + :days as int * 9
				let "parking time" be 
					"0 hours"{
						let hours be 0
						let minutes be 0
						let expectedCosts be :dayCosts
						let [Req16] be (:"parking lot"" costs ":expectedCosts)
						let [Req18] be (:"parking lot"" costs ":expectedCosts)
					},
					"4 hour or less"{
						let hours be 0, 3, 4 ordered
						let minutes be 1, 59, 0 ordered
						/*
						 * All expressions are xbase expressions. They can include e.g. an if statement.
						 */
						let expectedCosts be :dayCosts as int + :hours as int * 2 + if(:minutes != 0) 2 else 0
						let [Req16] be (:"parking lot"" costs ":expectedCosts)
					},
					"more than 4 hours"{
						let hours be 4, 23 ordered
						let minutes be 1, 59 ordered
						let expectedCosts be :dayCosts as int + 9
						let [Req17] be (:"parking lot"" costs ":expectedCosts)
					} 
				let [Req15] be (:"parking lot"" ":"parking time")	 
			}
		}
	},
"failure"{
	let focus be  
		"select illegal lot (wrongValue)"{
			let wrongValue be "NULL_VALUE", "BAD_VALUE"
		}, 
		"use illegal date in calculation"{
			let precondition1 be "select lot(lot)"
			/*
			 * lot can take values from listOfValidLots defined above
			 * Default rules do not force iteration.  
			 */
			let default lot be from listOfValidLots
			let illegalElement be "entry date", "entry time", "entry day part", "leaving date", "leaving time", "leaving day part"
			let precondition2 be ("set illegal " :illegalElement "(wrongValue)")
			let wrongValue be "NULL_VALUE", "BAD_VALUE"
		},
		"use leaving date earlier than entry date"{
			let precondition1 be "select lot(lot)"
			let default lot be from listOfValidLots
		}
}

/*
 * Models can implement methods called by strategies.
 * Model code coverage is evaluated using requirement references defined in the code.
 */
oracle ShortTermParkingCalculator{
	def calculateCosts(int weeks, int days, int hours, int minutes){
		val DAILY_MAX = 24
		val COSTS_PER_HOUR = 2
		/*
		 * Simple requirement reference is a string enclosed in rectangular brackets. 
		 */
		["Req4"]
		val costsForCompletedDays = (weeks * 7 + days) * DAILY_MAX
		val costsForHours = 
			if(hours * COSTS_PER_HOUR >= DAILY_MAX)
				["Req6"] DAILY_MAX
			else if(hours == 0){
				if(minutes > 0){
					if(minutes <= 30)
						/*
						 * Extended requirement reference contains an expression after the requirement id string.
						 * Here it is just a constant string "first hour", but here can be arbitrary expression.
						 */
						["Req5" "first hour"];
					COSTS_PER_HOUR
				}
				else
					0
			}
			else hours * COSTS_PER_HOUR + 
					if(minutes > 0){
							if(minutes <= 30)
								["Req5" "additional 1/2 hour"] 1
							else
								["Req5" "additional 2/2 hour"] COSTS_PER_HOUR
						}
						else
							0
		costsForCompletedDays + costsForHours
	}
}

oracle LongTermGarageParkingCalculator{
	def calculateCosts(int weeks, int days, int hours, int minutes){
		val WEEKLY_MAX = 78
		val DAILY_MAX = 13
		val COSTS_PER_HOUR = 2
		/*
		 * Simple requirement reference is a string enclosed in rectangular brackets. 
		 */
		 ["Req7"]
		if(weeks != 0) ["Req10"];
		
		val costsForCompletedDays = weeks * WEEKLY_MAX + days * DAILY_MAX
		val costsForHours = hours * COSTS_PER_HOUR + if(minutes > 0) COSTS_PER_HOUR else 0
		costsForCompletedDays 
			+ if (costsForHours <= DAILY_MAX) { 
				if (costsForHours != 0) ["Req8"]; 
				costsForHours 
			  }
			else 
				["Req9"] DAILY_MAX
	}
}
/*
 * run section defines what strategies are executed and configures the output.
 * Strategies to be run and models to be checked for the code coverage must be mentioned here. 
 */	
run strategy goal parkCostCalculatorTests 
	with oracle goal ShortTermParkingCalculator, 
	oracle goal LongTermGarageParkingCalculator
	/*
	 * the next line lets generated test be written in xml format in directory output
	 * and as a junit test generated by applying xslt transformation java.xslt to the above xml file.
	 * The generated java file is put in directory generated-tests
	 */
	output "output/xml", apply "/java.xslt" output "generated-tests/java" 
	/*
	 * Requirement coverage information should be written in file output/report.xml
	 */
	report  "output/report.xml"