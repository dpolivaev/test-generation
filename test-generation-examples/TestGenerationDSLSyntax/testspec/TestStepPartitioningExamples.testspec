oracle PartitionedSteps
	val steps = stepCounter("step")
	val firstTwoSteps = steps.nextSubsequence(2)
	val nextTwoSteps = steps.nextSubsequence(2)
	
	
strategy generateSteps
	val partitionedSteps = new PartitionedSteps	
	val alternativeNextTwoSteps = partitionedSteps.nextTwoSteps.copy
	
	let lazy (partitionedSteps.firstTwoSteps.next) be "step 1"	
	let lazy (partitionedSteps.nextTwoSteps.next) be "step 3"

	let lazy (partitionedSteps.firstTwoSteps.next) be "step 2"	
	let lazy (partitionedSteps.nextTwoSteps.next) be "step 4"

	let lazy (partitionedSteps.firstTwoSteps) be "another step 2"
	let lazy (alternativeNextTwoSteps.next) be "another step 3"
	
	let step1 be :step#1
	let step2 be :step#2
	let step3 be :step#3
	let step4 be :step#4
	
run strategy generateSteps		