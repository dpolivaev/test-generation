strategy SyntaxExamples

let example be 
	/*
	 * generate three property combinations with x='a', x='b' and x='c'
	 */
	'stand alone property' {
    	let x be 'a', 'b', 'c'
    },

	/*
	 * generate a cross product of three values for x and three values for y
	 */
	'all combinations' {
    	let x be 'a', 'b', 'c' {
          let y be  'A', 'B', 'C'
        }
    },
    
	/*
	 * parallel iteration over values of x, y and z creates 5 combinations given in 5 columns below:
	 * x takes values 'a', 'b', 'c', 'a', 'b' 
	 * y takes values 'A', 'B', 'A', 'B', 'A' 
	 * z takes values '1', '2', '3', '4', '5' 
	 */
    'parallel combinations ordered' {
    	let ordered x be 'a', 'b', 'c'
    	let ordered y be 'A', 'B'
    	let ordered z be '1', '2', '3', '4', '5'
    },
    
    /*
     * There are 5 combinations. 
     * Unlike the previous case the combinations are not specified in advance.
     */
	'parallel combinations shuffled'{
    	let shuffled x be 'a', 'b', 'c'
    	let shuffled y be 'A', 'B'
    	let shuffled z be '1', '2', '3', '4', '5' 
    },
    
    /*
     * There are 5 combinations. 
     * Unlike the previous case first iteration of each property is ordered,
     * all following iterations are not.
     */
    'parallel combinations first ordered then shuffled by default' {
    	let x be 'a', 'b', 'c'
    	let y be 'A', 'B'
    	let z be '1', '2', '3', '4', '5', '6'
    },
    
    /*
     * values of z depend on values of x and y
     */
	'dependent values'{
    	let ordered x be 'a', 'b', 'c'
    	let ordered y be 'A', 'B'
    	let z be :x + " && " + :y,  :x + " || " + :y
    },
    
    /*
     * For each pair of x and y there are two values of z
     */
	'explicit dependencies' {
    	for each x, y  let z be (:x " && " :y),  (:x" || ":y)	
    	let x be 'a', 'b', 'c' 
    	let y be'A', 'B'
    },
    
    /*
     * values of y depend on values of x.
     * In this case 5 combinations are created.
     */
	'branches'{
		let x be 'a', 'b' {
        	let y be 'A', 'B'
        },
        'c'{let y be 'C'}
     },
     
     /*
      * Here y is set to 'C' unless x is set to 'c'.
      * The second rule for y containing keyword "if" is added to the rule stack after the first,
      * it is evaluated first but it is only applicable if the condition is satisfied. 
      */
	'conditions' {
    	let x be 'a', 'b', 'c'{
        	rule y let y be 'C'
            rule y if :x == 'c' let y be 'A', 'B'
        }
    },
    
    /*
     * Values for y are given by default rules.
     * They are lazily evaluated when value of property y is requested. 
     */
	'defaults' {
	    let x be 
	    	'a', 'b', 'c'{},
	        'd'{
				let y be 'A', 'B'
	        }
	   let default y be 'C'
	   if :x != 'b' let default y be 'D', 'E'
	   let z be :y
	   },
	   
	 /*
	  * Default rules can be defined only for parts of the strategies.
	  */  
	'branched defaults'{
    	let x be 
    		'a', 'b', 'c'{},
            'd'{
                let y be 'A', 'B'
            },
            'e' { let default y be 'E'}
       let default y be 'C'
       let default y be 'C'
       if :x != 'b' let default y be 'D', 'E'
       let z be :y
	},
	
	/*
	 * Default rules can reference properties set by other default rules
	 * which are evaluated in backward chaining 
	 */
	'chained defaults'{
    	let x be 
    		'a', 'b', 'c'{},
            'd'{
                let y be 'A', 'B'
            },
            'e' { let default y be 'E'}
       let default y be :z
       if :z != 'b' let default y be :z
       let default z be :x
       if :x != 'b' let default y be 'D', 'E'
       let w be :y
	},
	
	/*
	 * It is allowed to skip some combinations.
	 * In the below example only 4 combinations are generated.
	 */
	'skip'{
	    let x be 'a', 'b', 'c'{
	       if :x == 'b' skip
	       let y be 'A', 'C'
		}
	},
	
	/*
	 * Conditionally skip some values.
	 */
	'value conditions'{
	    let x be 'a', 'b', 'c'{
	       let ordered y be 'A' only if :x=='a', 
	       			'B' only if :x=='b', 
	       			'C'
		}
	},
	
	/*
	 * New rules override old rule's content and keep rule evaluation order
	 */
	"new rules override old rule's content and keep rule evaluation order" {
	    rule x let x be "a"
	    let default y be "A"
	    let default y be "B"
	    let default y be "C"
	    let z be :y
	    rule x let x be "b"
	    rule x let x be "c"
    },
    
    /*
     * Named value lists can be defined and used at any place
     */
    "named value lists can be defined " {
    	let x be namedListOfXValues with 'a', 'b', 'c' {
    		let y be 'A', 'B'
    	}
    },
    
     "named value lists can be reused globally " {
    	let x be from namedListOfXValues
    	let shuffled default y be from namedListOfXValues
    	let z be :y
    		
    },
    
	'big integer' {
		let x be 0xff#BI
    },
    
    'applying external strategy'{
    	let x be 1,2,3
    	for each x if (:x as int) < 2 apply calledStrategy(4)
    }
    
strategy calledStrategy(int a)
	val b = 2
	let z be a + b

run strategy SyntaxExamples

run
	val parameter = 1 
	def parameterCall() {parameter}
	strategy calledStrategy(parameterCall)

run
	strategy calledStrategy(parameter)
	
run
	strategy calledStrategy(parameterCall)
     